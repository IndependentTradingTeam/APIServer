name: Build APIServer

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Clone Java-FastCGI-Client
        run: |
          git clone https://github.com/wuyunfeng/Java-FastCGI-Client.git
          cd Java-FastCGI-Client
      
      - name: Create pom.xml for Java-FastCGI-Client
        run: |
          echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.wuyufeng.open</groupId>
            <artifactId>Java-FastCGI-Client</artifactId>
            <version>1.0-SNAPSHOT</version>
            <build>
              <sourceDirectory>src</sourceDirectory>
              <plugins>
                <plugin>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.8.1</version>
                  <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                  </configuration>
                </plugin>
              </plugins>
            </build>
          </project>' > Java-FastCGI-Client/pom.xml
          
      - name: Build Java-FastCGI-Client
        run: |
          cd Java-FastCGI-Client
          mvn clean install

      - name: Clone and Build MavenUtility
        run: |
          git clone https://github.com/MatteoBax/MavenUtility
          cd MavenUtility
          mvn clean install

      - name: Clone and Build HTTPServer
        run: |
          git clone https://github.com/MatteoBax/HTTPServer
          cd HTTPServer
          mvn clean install
      - name: Build
        run: mvn clean package -B
      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: APIServer
          path: target/*.jar

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install libxml2-utils
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils
        
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'zulu'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          version=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          echo "::set-output name=version::$version"

      - name: Download artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: APIServer
          path: target/*.jar
      
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JAR
        run: |
          mvn clean package
          echo "Uploading artifact..."
          gh release upload v${{ steps.extract_version.outputs.version }} target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
